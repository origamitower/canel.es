
module.exports = function($platform) {
  const $rt = $platform.runtime;
  
  $rt.$module("purr.core.parser", ($self) => {
    $rt.$use($self, "purr.prelude", ["map","first","second"])
    $rt.$use($self, "purr.core.ast", ["Module","Interface_Specifier","Name","Qualified_Name","Declaration","Field","Variant","Binding_Specifier","Method_Parameter","Method_Dispatch","Expression","Case","Pattern","Version"])
    $rt.$use($self, "pure.core.parser_js", ["parse_raw"])
    $rt.$public($self, ["parse"]);
    $rt.$method($self, "parse", ["text"], (...$in) => {
      return $rt.$scope($self, ($self) => {
        $rt.$scope_apply_params($self, ["text"], $in);
        return $rt.$method_call($self, "reify", [$rt.$method_call($self, "parse_raw", [$rt.$deref($self, "text")])]);
      });
    });
    $rt.$method($self, "reified", ["ast"], (...$in) => {
      return $rt.$scope($self, ($self) => {
        $rt.$scope_apply_params($self, ["ast"], $in);
        return $rt.$match($self, $rt.$deref($self, "ast"), [$rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("id")), $rt.$pattern.$bind("x")]), ($self) => $rt.$new($self, $rt.$deref($self, "Name"), [["name", $rt.$deref($self, "x")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("qualid"))]), ($self) => $rt.$method_call($self, "reified", [$rt.$deref($self, "xs")])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("mod")), $rt.$pattern.$bind("id"), $rt.$pattern.$bind("declarations")]), ($self) => $rt.$new($self, $rt.$deref($self, "Module"), [["interface", $rt.$new($self, $rt.$deref($self, "Interface_Specifier"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "id")])], ["version", $rt.$new($self, $rt.$deref($self, "Version"), [["major", $rt.$int32("+", "1")], ["minor", $rt.$int32("+", "0")], ["patch", $rt.$int32("+", "0")]])]])], ["metadata", $rt.$bool("false")], ["declarations", $rt.$method_call($self, "reified", [$rt.$deref($self, "declarations")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("record")), $rt.$pattern.$bind("id"), $rt.$pattern.$bind("fields")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Declaration"), "Record"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "id")])], ["fields", $rt.$method_call($self, "reified", [$rt.$deref($self, "fields")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("union")), $rt.$pattern.$bind("id"), $rt.$pattern.$bind("cases")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Declaration"), "Union"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "id")])], ["variants", $rt.$method_call($self, "reified", [$rt.$deref($self, "cases")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("public")), $rt.$pattern.$bind("symbols")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Declaration"), "Public"), [["bindings", $rt.$deref($self, "symbols")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("use")), $rt.$pattern.$bind("mod"), $rt.$pattern.$bind("symbols")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Declaration"), "Use"), [["interface", $rt.$new($self, $rt.$deref($self, "Interface_Specifier"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "mod")])], ["version", $rt.$new($self, $rt.$deref($self, "Version"), [["major", $rt.$int32("+", "1")], ["minor", $rt.$int32("+", "0")], ["patch", $rt.$int32("+", "0")]])]])], ["bindings", $rt.$deref($self, "symbols")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("bool")), $rt.$pattern.$bind("value")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Boolean"), [["value", $rt.$deref($self, "value")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("int")), $rt.$pattern.$bind("sign"), $rt.$pattern.$bind("value")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Integer_32bit"), [["sign", $rt.$deref($self, "sign")], ["digits", $rt.$deref($self, "value")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("dec")), $rt.$pattern.$bind("sign"), $rt.$pattern.$bind("integer"), $rt.$pattern.$bind("decimal")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Decimal_64bit"), [["sign", $rt.$deref($self, "sign")], ["integer", $rt.$deref($self, "integer")], ["decimal", $rt.$deref($self, "decimal")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("text")), $rt.$pattern.$bind("value")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Text"), [["value", $rt.$deref($self, "value")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("vec")), $rt.$pattern.$bind("items")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Vector"), [["items", $rt.$method_call($self, "reified", [$rt.$deref($self, "items")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("closure")), $rt.$pattern.$bind("args"), $rt.$pattern.$bind("expr")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Closure"), [["parameters", $rt.$method_call($self, "reified", [$rt.$deref($self, "args")])], ["expression", $rt.$method_call($self, "reified", [$rt.$deref($self, "expr")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("if")), $rt.$pattern.$bind("test"), $rt.$pattern.$bind("consequent"), $rt.$pattern.$bind("alternate")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "If"), [["condition", $rt.$method_call($self, "reified", [$rt.$deref($self, "test")])], ["consequent", $rt.$method_call($self, "reified", [$rt.$deref($self, "consequent")])], ["alternate", $rt.$method_call($self, "reified", [$rt.$deref($self, "alternate")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("let")), $rt.$pattern.$bind("id"), $rt.$pattern.$bind("value"), $rt.$pattern.$bind("expr")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Let"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "id")])], ["value", $rt.$method_call($self, "reified", [$rt.$deref($self, "value")])], ["expression", $rt.$method_call($self, "reified", [$rt.$deref($self, "expr")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("new")), $rt.$pattern.$bind("structure"), $rt.$pattern.$bind("fields")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "New"), [["structure", $rt.$method_call($self, "reified", [$rt.$deref($self, "structure")])], ["fields", $rt.$method_call($self, "reified", [$rt.$deref($self, "fields")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("call")), $rt.$pattern.$bind("callee"), $rt.$pattern.$bind("args")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Call"), [["callee", $rt.$method_call($self, "reified", [$rt.$deref($self, "callee")])], ["arguments", $rt.$method_call($self, "reified", [$rt.$deref($self, "args")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("proj")), $rt.$pattern.$bind("structure"), $rt.$pattern.$bind("field")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Project"), [["structure", $rt.$method_call($self, "reified", [$rt.$deref($self, "structure")])], ["field", $rt.$method_call($self, "reified", [$rt.$deref($self, "field")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("deref")), $rt.$pattern.$bind("id")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Variable"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "id")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("match")), $rt.$pattern.$bind("expr"), $rt.$pattern.$bind("cases")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Expression"), "Match"), [["value", $rt.$method_call($self, "reified", [$rt.$deref($self, "expr")])], ["cases", $rt.$method_call($self, "reified", [$rt.$deref($self, "cases")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("case")), $rt.$pattern.$bind("pattern"), $rt.$pattern.$bind("expr")]), ($self) => $rt.$new($self, $rt.$deref($self, "Case"), [["pattern", $rt.$method_call($self, "reified", [$rt.$deref($self, "pattern")])], ["constraint", $rt.$bool("false")], ["expression", $rt.$method_call($self, "reified", [$rt.$deref($self, "expr")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_any"))]), ($self) => $rt.$project($self, $rt.$deref($self, "Pattern"), "Any")), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_eq")), $rt.$pattern.$bind("value")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Pattern"), "Equals"), [["expression", $rt.$method_call($self, "reified", [$rt.$deref($self, "value")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_bind")), $rt.$pattern.$bind("name")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Pattern"), "Bind"), [["name", $rt.$method_call($self, "reified", [$rt.$deref($self, "name")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_unapply")), $rt.$pattern.$bind("extractor"), $rt.$pattern.$bind("fields")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Pattern"), "Unapply"), [["extractor", $rt.$method_call($self, "reified", [$rt.$deref($self, "extractor")])], ["fields", $rt.$method_call($self, "reified", [$rt.$deref($self, "fields")])]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_vec")), $rt.$pattern.$bind("items"), $rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("none"))])]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Pattern"), "Vector"), [["items", $rt.$method_call($self, "reified", [$rt.$deref($self, "items")])], ["spread", $rt.$bool("false")]])), $rt.$match_case($rt.$pattern.$vector([$rt.$pattern.$equal($rt.$text("patt_vec")), $rt.$pattern.$bind("items"), $rt.$pattern.$bind("spread")]), ($self) => $rt.$new($self, $rt.$project($self, $rt.$deref($self, "Pattern"), "Vector"), [["items", $rt.$method_call($self, "reified", [$rt.$deref($self, "items")])], ["spread", $rt.$method_call($self, "reified", [$rt.$deref($self, "spread")])]])), $rt.$match_case($rt.$pattern.$vector([]), ($self) => $rt.$method_call($self, "_:map:", [$rt.$deref($self, "items"), $rt.$closure(["x"], (...$in) => {
  return $rt.$scope($self, ($self) => {
    $rt.$scope_apply_params($self, ["x"], $in);
    return $rt.$method_call($self, "reified", [$rt.$deref($self, "x")]);
  });
})]))]);
      });
    });
  });
};
  