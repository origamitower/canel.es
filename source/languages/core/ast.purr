language purr.core.kernel

#: The AST Purr languages compile to.
module purr.languages.core.ast
  provides { 
    Module, Name, Keyword, Qualified_Name, Annotation,
    Declaration, Signature, Parameter, Keyword_Parameter,
    Value, Expression, Dispatch, Keyword_Argument, Association, Let_Binding,
    Case, Pattern, Field_Pattern
  }

  record Module { interface, declarations }

  record Name { value }
  record Keyword { value }
  record Qualified_Name { names }

  record Annotation { name, values, declaration }

  union Declaration
    | Record { name, fields }
    | Union { name, variants }
    | Method { signature, body }
    | Provides { bindings }
    | Uses { interface, bindings }

  union Signature
    | Nullary { name }
    | Unary { name, parameter }
    | Binary { operator, left, right }
    | Keyword_With_Argument { parameter, keywords }
    | Keyword { keywords }

  union Parameter
    | Untyped { name }
    | Typed { name, type }

  record Keyword_Parameter { keyword, parameter }

  # Values and Expressions
  union Value
    | Boolean { value }
    | Text { characters }
    | Integer { value }
    | Decimal { value }
    | Vector { items }
    | Closure { parameters, body }

  union Expression
    | Literal { value }
    | Variable { name }
    | If { condition, consequent, alternate }
    | Let { bindings, expression }
    | New { structure, associations }
    | Call { callee, arguments }
    | Project { structure, field }
    | Match { value, cases }
    | Dispatch { dispatch }
  
  union Dispatch
    | Nullary { name }
    | Unary { name, argument }
    | Binary { operator, left, right }
    | Keyword_With_Argument { argument, keywords }
    | Keyword { keywords }

  record Keyword_Argument { keyword, argument }
  record Association { name, expression }
  record Let_Binding { name, value }
  record Case { pattern, expression }

  union Pattern
    | Any {}
    | Equals { expression }
    | Bind { name }
    | Unapply { extractor, fields }
    | Instance { extractor }
    | Vector { items }
    | Vector_Spread { items, spread }

  record Field_Pattern { field, pattern }