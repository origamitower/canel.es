language purr.core.kernel

#: A simpler intermediate language for analysis by the compiler. Not a CFG.
module purr.core.ir where
  public (
    Module, Binding, Variant, Let_Binding, Field_Map, Case,
    Declaration, Parameter, Expression, Pattern
  )

  record Module { interface, uses, exports, declarations }
  record Binding { name, alias }
  record Variant { tag, fields }
  record Let_Binding { name, value }
  record Field_Map { name, expression }
  record Case { pattern, expression }
  
  union Declaration
    case Record { name, fields }
    case Union { name, variants }
    case Method { name, parameters, body }
    case Foreign { path, name }   # FIXME: This will go away once we have the VM mirror

  union Parameter
    case Untyped { name }
    case Typed { name, type }

  union Expression
    case Literal { value }
    case Closure { parameters, body }
    case If { condition, consequent, alternate }
    case Let { bindings, expression }
    case New { structure, fields }
    case Dispatch { name, arguments }
    case Call { callee, argumeents }
    case Project { structure, field }
    case Match { value, cases }

  union Pattern
    case Any
    case Equals { expression }
    case Bind { name }
    case Unapply { extractor, fields }
    case Instance { extractor }
    case Vector { items, has_spread }

  