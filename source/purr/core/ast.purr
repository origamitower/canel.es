language purr.core.kernel

module purr.core.ast where
  public (
    Name, Selector, Module, Declaration, Binding, Variant, Field, Signature, Argument, Keyword,
    Boolean, Value, Expression, Let_Binding, Case, Pattern, Vector_Pattern, Qualified_Id,
    Dispatch_Keyword, Field_Map, Field_Pattern, Method_Keyword
  )


  record Name { value }
  record Selector { value }
  record Keyword { value }
  record Qualified_Id { value }
  record Module { interface, declarations }
  
  union Declaration
    case Use { interface, bindings }
    case Public { bindings }
    case Record { name, fields }
    case Union { name, variants }
    case Method { signature, body }
    case Foreign { path, name }

  record Binding { selector, alias }
  record Variant { tag, fields }
  record Field { name }

  union Signature
    case Nullary { name }                                       # f
    case Unary { name, argument }                               # a f, not a
    case Binary { operator, left, right }                       # a === b, a and b, a or b
    case Keyword_With_Leading_Argument { argument, keywords }   # a f: b g: c
    case Keyword { keywords }                                   # f: a g: b

  union Argument
    case Untyped { name }         # a
    case Typed { name, type }     # a is A

  record Method_Keyword { name, argument }     # f: (a is A), f: a
  
  union Boolean
    case True
    case False

  union Value
    case Boolean { value }
    case Text { characters }
    case Integer { value }
    case Decimal { value }
    case Vector { items }
    case Closure { parameters, body }

  union Expression
    case Literal { value }
    case Variable { name }
    case If { condition, consequent, alternate }
    case Let { bindings, expression }
    case New { structure, fields }
    case Dispatch_Nullary { name }
    case Dispatch_Unary { name, argument }
    case Dispatch_Binary { operator, left, right }
    case Dispatch_Keyword_With_Argument { argument, keywords }
    case Dispatch_Keyword { keywords }
    case Call { callee, arguments }
    case Project { structure, field }
    case Match { value, cases }

  record Dispatch_Keyword { keyword, argument }
  record Field_Map { name, expression }
  record Let_Binding { name, value }
  record Case { pattern, expression }

  union Pattern
    case Any
    case Equals { expression }
    case Bind { name }
    case Unapply { extractor, fields }
    case Instance { extractor }
    case Vector { items }
    case Vector_Spread { items, spread }

  record Field_Pattern { field, pattern }
